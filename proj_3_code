#include<iostream>
#include<string>
#include<iomanip>
using namespace std;
string operators[5] = { "ADD","ADDI","SUB","MUL","DIV" };
int F1 = 0, F2 = 2, F3 = 4, F4 = 6, F5 = 8;
string f1 = "", f2 = "", f3 = "", f4 = "", f5 = "";
int RS1 = -1, RS2 = -1, RS3 = -1, RS4 = -1, RS5 = -1;
int cycle = 0; int now = 0;
struct inst {
	string op;
	string rd;
	string rs1;
	int i;
	string rs2;
	string name;
}; 
inst insts[8]; inst R1, R2, R3, R4, R5;
void RF() {
	cout << " _ RF __\n"
		 << "F1 |" << F1 << " |\n"
		 << "F2 |" << F2 << " |\n"
		 << "F3 |" << F3 << " |\n"
		 << "F4 |" << F4 << " |\n"
		 << "F5 |" << F5 << " |\n"
		 << "--------\n";
}
void RAT() {
	if (insts[now].rd == "F1") {
		if (insts[now].op == "ADD" || insts[now].op == "ADDI" || insts[now].op == "SUB") {
			if (RS1 == -1) {
				RS1 = now;
				f1 = "RS1";
				insts[now].name = "RS1";
				R1.rd = insts[now].rd;
				R1.rs1 = insts[now].rs1;
				R1.rs2 = insts[now].rs2;
			}
			else if (RS2 == -1) {
				RS2 = now;
				f1 = "RS2";
				insts[now].name = "RS2";
				R2.rd = insts[now].rd;
				R2.rs1 = insts[now].rs1;
				R2.rs2 = insts[now].rs2;
			}
			else if (RS3 == -1) {
				RS3 = now;
				f1 = "RS3";
				insts[now].name = "RS3";
				R3.rd = insts[now].rd;
				R3.rs1 = insts[now].rs1;
				R3.rs2 = insts[now].rs2;
			}
		}
		else if (insts[now].op == "MUL" || insts[now].op == "DIV") {
			if (RS4 == -1) {
				RS4 = now;
				f1 = "RS4";
				insts[now].name = "RS4";
				R4.rd = insts[now].rd;
				R4.rs1 = insts[now].rs1;
				R4.rs2 = insts[now].rs2;
			}
			else if (RS5 == -1) {
				RS5 = now;
				f1 = "RS5";
				insts[now].name = "RS5";
				R5.rd = insts[now].rd;
				R5.rs1 = insts[now].rs1;
				R5.rs2 = insts[now].rs2;
			}
		}
	}
	else if (insts[now].rd == "F2") {
		if (insts[now].op == "ADD" || insts[now].op == "ADDI" || insts[now].op == "SUB") {
			if (RS1 == -1) {
				RS1 = now;
				f2 = "RS1";
				insts[now].name = "RS1";
				R1.rd = insts[now].rd;
				R1.rs1 = insts[now].rs1;
				R1.rs2 = insts[now].rs2;
			}
			else if (RS2 == -1) {
				RS2 = now;
				f2 = "RS2";
				insts[now].name = "RS2";
				R2.rd = insts[now].rd;
				R2.rs1 = insts[now].rs1;
				R2.rs2 = insts[now].rs2;
			}
			else if (RS3 == -1) {
				RS3 = now;
				f2 = "RS3";
				insts[now].name = "RS3";
				R3.rd = insts[now].rd;
				R3.rs1 = insts[now].rs1;
				R3.rs2 = insts[now].rs2;
			}
		}
		else if (insts[now].op == "MUL" || insts[now].op == "DIV") {
			if (RS4 == -1) {
				RS4 = now;
				f2 = "RS4";
				insts[now].name = "RS4";
				R4.rd = insts[now].rd;
				R4.rs1 = insts[now].rs1;
				R4.rs2 = insts[now].rs2;
			}
			else if (RS5 == -1) {
				RS5 = now;
				f2 = "RS5";
				insts[now].name = "RS5";
				R5.rd = insts[now].rd;
				R5.rs1 = insts[now].rs1;
				R5.rs2 = insts[now].rs2;
			}
		}
	}
	else if (insts[now].rd == "F3") {
		if (insts[now].op == "ADD" || insts[now].op == "ADDI" || insts[now].op == "SUB") {
			if (RS1 == -1) {
				RS1 = now;
				f3 = "RS1";
				insts[now].name = "RS1";
				R1.rd = insts[now].rd;
				R1.rs1 = insts[now].rs1;
				R1.rs2 = insts[now].rs2;
			}
			else if (RS2 == -1) {
				RS2 = now;
				f3 = "RS2";
				insts[now].name = "RS2";
				R2.rd = insts[now].rd;
				R2.rs1 = insts[now].rs1;
				R2.rs2 = insts[now].rs2;
			}
			else if (RS3 == -1) {
				RS3 = now;
				f3 = "RS3";
				insts[now].name = "RS3";
				R3.rd = insts[now].rd;
				R3.rs1 = insts[now].rs1;
				R3.rs2 = insts[now].rs2;
			}
		}
		else if (insts[now].op == "MUL" || insts[now].op == "DIV") {
			if (RS4 == -1) {
				RS4 = now;
				f3 = "RS4";
				insts[now].name = "RS4";
				R4.rd = insts[now].rd;
				R4.rs1 = insts[now].rs1;
				R4.rs2 = insts[now].rs2;
			}
			else if (RS5 == -1) {
				RS5 = now;
				f3 = "RS5";
				insts[now].name = "RS5";
				R5.rd = insts[now].rd;
				R5.rs1 = insts[now].rs1;
				R5.rs2 = insts[now].rs2;
			}
		}
	}
	else if (insts[now].rd == "F4") {
		if (insts[now].op == "ADD" || insts[now].op == "ADDI" || insts[now].op == "SUB") {
			if (RS1 == -1) {
				RS1 = now;
				f4 = "RS1";
				insts[now].name = "RS1";
				R1.rd = insts[now].rd;
				R1.rs1 = insts[now].rs1;
				R1.rs2 = insts[now].rs2;
			}
			else if (RS2 == -1) {
				RS2 = now;
				f4 = "RS2";
				insts[now].name = "RS2";
				R2.rd = insts[now].rd;
				R2.rs1 = insts[now].rs1;
				R2.rs2 = insts[now].rs2;
			}
			else if (RS3 == -1) {
				RS3 = now;
				f4 = "RS3";
				insts[now].name = "RS3";
				R3.rd = insts[now].rd;
				R3.rs1 = insts[now].rs1;
				R3.rs2 = insts[now].rs2;
			}
		}
		else if (insts[now].op == "MUL" || insts[now].op == "DIV") {
			if (RS4 == -1) {
				RS4 = now;
				f4 = "RS4";
				insts[now].name = "RS4";
				R4.rd = insts[now].rd;
				R4.rs1 = insts[now].rs1;
				R4.rs2 = insts[now].rs2;
			}
			else if (RS5 == -1) {
				RS5 = now;
				f4 = "RS5";
				insts[now].name = "RS5";
				R5.rd = insts[now].rd;
				R5.rs1 = insts[now].rs1;
				R5.rs2 = insts[now].rs2;
			}
		}
	}
	else if (insts[now].rd == "F5") {
		if (insts[now].op == "ADD" || insts[now].op == "ADDI" || insts[now].op == "SUB") {
			if (RS1 == -1) {
				RS1 = now;
				f5 = "RS1";
				insts[now].name = "RS1";
				R1.rd = insts[now].rd;
				R1.rs1 = insts[now].rs1;
				R1.rs2 = insts[now].rs2;
			}
			else if (RS2 == -1) {
				RS2 = now;
				f5 = "RS2";
				insts[now].name = "RS2";
				R2.rd = insts[now].rd;
				R2.rs1 = insts[now].rs1;
				R2.rs2 = insts[now].rs2;
			}
			else if (RS3 == -1) {
				RS3 = now;
				f5 = "RS3";
				insts[now].name = "RS3";
				R3.rd = insts[now].rd;
				R3.rs1 = insts[now].rs1;
				R3.rs2 = insts[now].rs2;
			}
		}
		else if (insts[now].op == "MUL" || insts[now].op == "DIV") {
			if (RS4 == -1) {
				RS4 = now;
				f5 = "RS4";
				insts[now].name = "RS4";
				R4.rd = insts[now].rd;
				R4.rs1 = insts[now].rs1;
				R4.rs2 = insts[now].rs2;
			}
			else if (RS5 == -1) {
				RS5 = now;
				f5 = "RS5";
				insts[now].name = "RS5";
				R5.rd = insts[now].rd;
				R5.rs1 = insts[now].rs1;
				R5.rs2 = insts[now].rs2;
			}
		}
	}
	cout << "\n _ RAT __\n"
		<< "F1 |" << f1 << " |\n"
		<< "F2 |" << f2 << " |\n"
		<< "F3 |" << f3 << " |\n"
		<< "F4 |" << f4 << " |\n"
		<< "F5 |" << f5 << " |\n"
		<< "--------\n";
	now++;
}
void RS_1() {
	cout << "\n_ RS _________________\n";
	if (RS1 != -1) {
		cout << "RS1 |  ";
		if (insts[RS1].op == "ADDI" || insts[RS1].op == "ADD")
			cout << "+";
		else if (insts[RS1].op == "SUB")
			cout << "-";
		else if (insts[RS1].op == "MUL")
			cout << "*";
		else if (insts[RS1].op == "DIV")
			cout << "/";
		cout << "|";
		if (insts[RS1].rs1 == " F1") {
			if (f1 != "")
				cout << f1;
			else
				cout << F1;
		}
		else if (insts[RS1].rs1 == " F2") {
			if (f2 != "")
				cout << f2;
			else
				cout << F2;
		}
		else if (insts[RS1].rs1 == " F3") {
			if (f3 != "")
				cout << f3;
			else
				cout << F3;
		}
		else if (insts[RS1].rs1 == " F4") {
			if (f4 != "")
				cout << f4;
			else
				cout << F4;
		}
		else if (insts[RS1].rs1 == " F5") {
			if (f5 != "")
				cout << f5;
			else
				cout << F5;
		}
		cout << " | ";
		if (insts[RS1].op == "ADDI")
			cout << insts[RS1].i << " | \n";
		else {
			if (insts[RS1].rs2 == " F1") {
				if (f1 != "")
					cout << f1;
				else
					cout << F1;
			}
			else if (insts[RS1].rs2 == " F2") {
				if (f2 != "")
					cout << f2;
				else
					cout << F2;
			}
			else if (insts[RS1].rs2 == " F3") {
				if (f3 != "")
					cout << f3;
				else
					cout << F3;
			}
			else if (insts[RS1].rs2 == " F4") {
				if (f4 != "")
					cout << f4;
				else
					cout << F4;
			}
			else if (insts[RS1].rs2 == " F5") {
				if (f5 != "")
					cout << f5;
				else
					cout << F5;
			}
		}
	}
	else {
		cout << "RS1 |      |      |      |\n";
	}
	if (RS2 != -1) {
		cout << "RS2 |  ";
		if (insts[RS2].op == "ADDI" || insts[RS2].op == "ADD")
			cout << "+";
		else if (insts[RS2].op == "SUB")
			cout << "-";
		else if (insts[RS2].op == "MUL")
			cout << "*";
		else if (insts[RS2].op == "DIV")
			cout << "/";
		cout << "|";
		if (insts[RS2].rs1 == "F1") {
			if (f1 != "")
				cout << f1;
			else
				cout << F1;
		}
		else if (insts[RS2].rs1 == " F2") {
			if (f2 != "")
				cout << f2;
			else
				cout << F2;
		}
		else if (insts[RS2].rs1 == " F3") {
			if (f3 != "")
				cout << f3;
			else
				cout << F3;
		}
		else if (insts[RS2].rs1 == " F4") {
			if (f4 != "")
				cout << f4;
			else
				cout << F4;
		}
		else if (insts[RS2].rs1 == " F5") {
			if (f5 != "")
				cout << f5;
			else
				cout << F5;
		}
		cout << " | ";
		if (insts[RS2].op == "ADDI")
			cout << insts[RS2].i << " | \n";
		else {
			if (insts[RS2].rs2 == " F1") {
				if (f1 != "")
					cout << f1;
				else
					cout << F1;
			}
			else if (insts[RS2].rs2 == " F2") {
				if (f2 != "")
					cout << f2;
				else
					cout << F2;
			}
			else if (insts[RS2].rs2 == " F3") {
				if (f3 != "")
					cout << f3;
				else
					cout << F3;
			}
			else if (insts[RS2].rs2 == " F4" || insts[RS2].rs2 == "F4") {
				if (f4 != "")
					cout << f4;
				else
					cout << F4;
			}
			else if (insts[RS2].rs2 == " F5") {
				if (f5 != "")
					cout << f5;
				else
					cout << F5;
			}
			cout << " | \n";
		}
	}
	else {
		cout << "RS2 |      |      |      |\n";
	}
	if (RS3 != -1) {
		cout << "RS3 |  ";
		if (insts[RS3].op == "ADDI" || insts[RS3].op == "ADD")
			cout << "+";
		else if (insts[RS3].op == "SUB")
			cout << "-";
		else if (insts[RS3].op == "MUL")
			cout << "*";
		else if (insts[RS3].op == "DIV")
			cout << "/";
		cout << "|";
		if (insts[RS3].rs1 == " F1") {
			if (f1 != "")
				cout << f1;
			else
				cout << F1;
		}
		else if (insts[RS3].rs1 == " F2") {
			if (f2 != "")
				cout << f2;
			else
				cout << F2;
		}
		else if (insts[RS3].rs1 == " F3") {
			if (f3 != "")
				cout << f3;
			else
				cout << F3;
		}
		else if (insts[RS3].rs1 == " F4") {
			if (f4 != "")
				cout << f4;
			else
				cout << F4;
		}
		else if (insts[RS3].rs1 == " F5") {
			if (f5 != "")
				cout << f5;
			else
				cout << F5;
		}
		cout << " | ";
		if (insts[RS3].op == "ADDI")
			cout << insts[RS3].i << " | \n";
		else {
			if (insts[RS3].rs2 == " F1") {
				if (f1 != "")
					cout << f1;
				else
					cout << F1;
			}
			else if (insts[RS3].rs2 == " F2") {
				if (f2 != "")
					cout << f2;
				else
					cout << F2;
			}
			else if (insts[RS3].rs2 == " F3") {
				if (f3 != "")
					cout << f3;
				else
					cout << F3;
			}
			else if (insts[RS3].rs2 == " F4") {
				if (f4 != "")
					cout << f4;
				else
					cout << F4;
			}
			else if (insts[RS3].rs2 == " F5") {
				if (f5 != "")
					cout << f5;
				else
					cout << F5;
			}
		}
	}
	else {
		cout << "RS3 |      |      |      |\n";
	}
	cout << "----------------------\n"
		<< "BUFFER: empty\n";
}
void RS_2() {
	cout << "_ RS _________________\n";
	if (RS4 != -1) {
		cout << "RS4 |  ";
		if (insts[RS4].op == "ADDI" || insts[RS4].op == "ADD")
			cout << "+";
		else if (insts[RS4].op == "SUB")
			cout << "-";
		else if (insts[RS4].op == "MUL")
			cout << "*";
		else if (insts[RS4].op == "DIV")
			cout << "/";
		cout << "|";
		if (insts[RS4].rs1 == " F1") {
			if (f1 != "")
				cout << f1;
			else
				cout << F1;
		}
		else if (insts[RS4].rs1 == " F2") {
			if (f2 != "")
				cout << f2;
			else
				cout << F2;
		}
		else if (insts[RS4].rs1 == " F3") {
			if (f3 != "")
				cout << f3;
			else
				cout << F3;
		}
		else if (insts[RS4].rs1 == " F4") {
			if (f4 != "")
				cout << f4;
			else
				cout << F4;
		}
		else if (insts[RS4].rs1 == " F5") {
			if (f5 != "")
				cout << f5;
			else
				cout << F5;
		}
		cout << " | ";
		cout << "|";
		if (insts[RS4].rs2 == " F1") {
			if (f1 != "")
				cout << f1;
			else
				cout << F1;
		}
		else if (insts[RS4].rs2 == " F2") {
			if (f2 != "")
				cout << f2;
			else
				cout << F2;
		}
		else if (insts[RS4].rs2 == " F3") {
			if (f3 != "")
				cout << f3;
			else
				cout << F3;
		}
		else if (insts[RS4].rs2 == " F4") {
			if (f4 != "")
				cout << f4;
			else
				cout << F4;
		}
		else if (insts[RS4].rs2 == " F5") {
			if (f5 != "")
				cout << f5;
			else
				cout << F5;
		}
		cout << " | \n";
	}
	else {
		cout << "RS4 |      |      |      |\n";
	}
	if (RS5 != -1) {
		cout << "RS5 |  ";
		if (insts[RS5].op == "ADDI" || insts[RS5].op == "ADD")
			cout << "+";
		else if (insts[RS5].op == "SUB")
			cout << "-";
		else if (insts[RS5].op == "MUL")
			cout << "*";
		else if (insts[RS5].op == "DIV")
			cout << "/";
		cout << "|";
		if (insts[RS5].rs1 == " F1") {
			if (f1 != "")
				cout << f1;
			else
				cout << F1;
		}
		else if (insts[RS5].rs1 == " F2") {
			if (f2 != "")
				cout << f2;
			else
				cout << F2;
		}
		else if (insts[RS5].rs1 == " F3") {
			if (f3 != "")
				cout << f3;
			else
				cout << F3;
		}
		else if (insts[RS5].rs1 == " F4") {
			if (f4 != "")
				cout << f4;
			else
				cout << F4;
		}
		else if (insts[RS5].rs1 == " F5") {
			if (f5 != "")
				cout << f5;
			else
				cout << F5;
		}
		cout << " |";
		cout << "|";
		if (insts[RS5].rs2 == " F1") {
			if (f1 != "")
				cout << f1;
			else
				cout << F1;
		}
		else if (insts[RS5].rs2 == " F2") {
			if (f2 != "")
				cout << f2;
			else
				cout << F2;
		}
		else if (insts[RS5].rs2 == " F3") {
			if (f3 != "")
				cout << f3;
			else
				cout << F3;
		}
		else if (insts[RS5].rs2 == " F4") {
			if (f4 != "")
				cout << f4;
			else
				cout << F4;
		}
		else if (insts[RS5].rs2 == " F5") {
			if (f5 != "")
				cout << f5;
			else
				cout << F5;
		}
		cout << " | \n";
	}
	else {
		cout << "RS5 |      |      |      |\n";
	}
	cout << "----------------------\n"
		<< "BUFFER: empty\n";
}
int main() {
	int n = 8, j = 0; string instruction;
	while (n > 0) {
		int i = 0; 
		getline(cin, instruction);
		while (instruction[i] != ' ') {
			insts[j].op += instruction[i];
			i++;
		}i++;
		for (int k = 0; k < 5; k++) {
			if (operators[k] == insts[j].op) {
				if (k == 1) {
					while (instruction[i] != '\,') {
						insts[j].rd += instruction[i];
						i++;
					}i++;
					while (instruction[i] != '\,') {
						insts[j].rs1 += instruction[i];
						i++;
					}i += 2;
					string integer;
					while (instruction[i] != '\0') {
						integer += instruction[i];
						i++;
					}
					insts[j].i = stoi(integer);
					insts[j].rs2 = "-1";
				}
				else {
					while (instruction[i] != '\,') {
						insts[j].rd += instruction[i];
						i++;
					}i++;
					while (instruction[i] != '\,') {
						insts[j].rs1 += instruction[i];
						i++;
					}i += 2;
					while (instruction[i] != '\0') {
						insts[j].rs2 += instruction[i];
						i++;
					}
					insts[j].i = -1;
				}
				break;
			}
		}
		n--; j++;
	}
	for (int i = 0; i < 15;i++) {
		cycle++;
		cout << "Cycle = " << cycle << endl;
		RF();
		RAT();
		RS_1();
		RS_2();
	}
}
